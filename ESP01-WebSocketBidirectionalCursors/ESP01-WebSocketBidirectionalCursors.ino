/*

This program is a solution for creating a web interface to control a device via 
an ESP8266 module. It is written in C++ and uses the ESP8266WebServer and 
WebSocketsServer_Generic libraries to handle web and Websocket communications. 
The code allows the ESP8266 module to be configured as an Access Point (AP) or 
as a WiFi Station (Station). Once the connection is established, the user can 
interact with a web page generated by the program to control the device.

The web page displays an interface with vertical sliders representing various 
controllable parameters, such as "OCT," "WAV," and "LEV." These sliders allow 
the user to send commands to the device via WebSocket. The program handles user 
input from the web page and a serial terminal, allowing a dual mode of 
interaction.

In addition to handling the user interface, the program also implements 
functions to manipulate and respond to received data, such as 
`handleSerialMessage` to handle serial messages and `updateBackgroundColor` to 
dynamically change the background color of the controls based on the values set.

*/

#include <ESP8266WebServer.h>
#include <WebSocketsServer_Generic.h>

// ===================================
// change ssid and password as needed
// ===================================
const char* ssid = "ESP-99999";    
const char* password = "pw12345";  

ESP8266WebServer server(80);
WebSocketsServer webSocket = WebSocketsServer(81);

void setup() {
  Serial.begin(115200);

  //
  // ============================
  // uncomment the lines below 
  // to select the desired WiFi operation type
  // ============================
  //
  // --------------------------
  // ** AP **
  // (creates a Wifi Access Point)
  // --------------------------
  WiFi.softAP(ssid, password);
  // --------------------------
  //
  // --------------------------
  // ** STATION **
  // (connection to an existing wifi network)
  // --------------------------
  // WiFi.begin(ssid, password); 
  // while (WiFi.status() != WL_CONNECTED) {
  //   delay(500);
  //   Serial.print(".");
  // }
  // Serial.println("");
  // Serial.print("Connected to ");
  // Serial.println(ssid);
  // Serial.print("IP address: ");
  // Serial.println(WiFi.localIP());
  // --------------------------
  //

  server.on("/", HTTP_GET, []() {
    server.send(200, "text/html", getHTML());
  });

  server.begin();

  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
}

void loop() {
  server.handleClient();
  webSocket.loop();

  if (Serial.available() > 0) {
    String message = Serial.readStringUntil('\n');
    handleSerialMessage(message);
  }
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
  if (type == WStype_TEXT) {
    Serial.println((char*)payload);
  }
}

void handleSerialMessage(String message) {
  int commaIndex = message.indexOf(',');
  if (commaIndex != -1) {
    String control = message.substring(0, commaIndex);
    String value = message.substring(commaIndex + 1);

    String script = "document.getElementById('" + control + "').value = " + value + ";";
    script += "updateSlider(document.getElementById('" + control + "'));";
    webSocket.broadcastTXT(script);
  }
}

String getHTML() {
  String html = "<!DOCTYPE html><html>";
  html += "<head>";
  html += getHead();
  html += "</head>";
  html += "<body>";
  html += getContainer();
  html += "<script>";
  html += "var debounceTimer;";
  html += "var webSocket = new WebSocket('ws://' + window.location.hostname + ':81/');";
  html += "webSocket.onmessage = function(event) {";
  html += "  eval(event.data);";  // Esegue lo script ricevuto
  html += "};";
  html += getScript();
  html += "</script>";
  html += "</body>";
  html += "</html>";
  return html;
}

// initializeSliders --> updateSlider --> updateBackgroundColor
String getScript() {
  String html = R"(   
        function updateSlider(slider) {
            var container = slider.parentElement;
            var valueLabel = container.querySelector('.value-label');
            valueLabel.textContent = slider.value;
            updateBackgroundColor(slider, container);
            if (debounceTimer) {
               clearTimeout(debounceTimer);
            }
            debounceTimer = setTimeout(function() {
                var message = slider.id + ',' + slider.value;
                webSocket.send(message);
            }, 100);
        }
        function updateBackgroundColor(slider, container) {
            var value = parseInt(slider.value, 10); // Assicurati che sia un numero
            var max = parseInt(slider.max, 10); // Assicurati che sia un numero
            var percentage = value / max;
            var intensity = parseInt(255 - (percentage * 255),10);
            var color = 'rgb(' + intensity + ', ' + intensity + ', 255)';
            container.style.backgroundColor = color;
        }
        function initializeSliders() {
            var sliders = document.querySelectorAll('.vertical-slider');
            for (var i = 0; i < sliders.length; i++) { // Uso di ciclo for invece di forEach
                updateSlider(sliders[i]);
            }
        }
        window.onload = function() {
          setTimeout(initializeSliders,100);
        })";
  return html;
}

String getHead() {
  String html = R"(
    <title>DCO1 Mixer Controls</title>
    <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
    }
    .containers-wrapper {
      display: flex;
      flex-wrap: wrap; /* Permette agli elementi di andare a capo */
    }
    .main-container {
      display: inline-block;
      border: 1px solid #ddd;
      padding: 5px; /* Riduzione del padding */
      margin-top: 20px;
      font-size: 8px;
    }
    .dco-title {
      background-color: black;
      color: white;
      padding: 5px;
      font-size: 8px;
      text-align: center;
      width: 100%;
      box-sizing: border-box;
      margin-bottom: 5px; /* Riduzione dello spazio sotto il titolo */
    }
    .control-container {
      display: inline-block;
      vertical-align: top;
      margin: 0; /* Rimozione del margine esterno */
      padding: 5px; /* Riduzione del padding interno */
      border: 1px solid #ddd;
      height: auto; /* Altezza automatica in base al contenuto */
      min-height: 100px; /* Altezza minima per ospitare le slider */
      font-size: 8px;
      position: relative;
    }
    .vertical-slider {
      width: 20px;
      height: 100px;
      -webkit-appearance: slider-vertical;
      writing-mode: bt-lr;
      font-size: 8px;
    }
    .value-label {
      position: absolute; /* Posizionamento assoluto rispetto al suo contenitore */
      bottom: -20px; /* Posiziona l'etichetta sotto al cursore */
      left: 50%; /* Centra l'etichetta */
      transform: translateX(-50%); /* Allinea centralmente l'etichetta */
      white-space: nowrap; /* Evita l'a capo dell'etichetta */
    }
    </style>)";
  return html;
}

String getContainer() {
  String html = "<div class='containers-wrapper'>";
  html += "<div class='main-container'>";
  html += "<div class='dco-title'>DCO1</div>";
  html += generCursor("OCT", 1, 3, 2);
  html += generCursor("WAV", 1, 15, 9);
  html += generCursor("LEV", 1, 31, 25);
  html += "</div>";
  html += "</div>";
  return html;
}

String generCursor(String thename, int min, int max, int defvalue) {
  String html = "<div class='control-container'>";
  html += "<div>" + thename + "</div>";
  html += "<input type='range' class='vertical-slider' min='" + String(min) + "' max='" + String(max) + "' value='" + String(defvalue) + "' orient='vertical' oninput='updateSlider(this)' id='" + thename + "' >";
  html += "<span class='value-label'>" + String(defvalue) + "</span>";
  html += "</div>";
  return html;
}