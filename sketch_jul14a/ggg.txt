#ifndef MORSECODE_H
#define MORSECODE_H

#include <Arduino.h>
#include <map>
#include "FileSystem.h"
#include "WiFiSetup.h"

const int buttonPin = 0; // GPIO0 per il tasto 2
const int ledPin = 2;

unsigned long buttonPressTime = 0;
String morseCode = "";
String decodedMessage = "";

const int debounceDelay = 25;
unsigned long lastDebounceTimeButton = 0;
bool lastButtonState = HIGH;
bool buttonState = HIGH;

unsigned long buttonPressStartTime = 0;
bool buttonPressed = false;

std::map<String, String> morseMap = {
  {".-", "A"}, {"-...", "B"}, {"-.-.", "C"}, {"-..", "D"}, {".", "E"},
  {"..-.", "F"}, {"--.", "G"}, {"....", "H"}, {"..", "I"}, {".---", "J"},
  {"-.-", "K"}, {".-..", "L"}, {"--", "M"}, {"-.", "N"}, {"---", "O"},
  {".--.", "P"}, {"--.-", "Q"}, {".-.", "R"}, {"...", "S"}, {"-", "T"},
  {"..-", "U"}, {"...-", "V"}, {".--", "W"}, {"-..-", "X"}, {"-.--", "Y"},
  {"--..", "Z"}, {"-----", "0"}, {".----", "1"}, {"..---", "2"}, {"...--", "3"},
  {"....-", "4"}, {".....", "5"}, {"-....", "6"}, {"--...", "7"}, {"---..", "8"},
  {"----.", "9"}, {".-.-.", "<AR>"}, {"-...-", " "}, {"---...", "<OS>"},
  {".-.-.-", "."}, {"--..--", ","}, {"..--..", "?"}, {"-.-.--", "!"},
  {"-..-.", "/"}, {"-.--.", "("}, {"-.--.-", ")"}, {".----.", "'"}, {"-....-", "-"},
  {".-..-.", "\""}, {"...-..-", "$"}, {".--.-.", "@"}, {"-.--.", "{"}, {"-.--.-", "}"}
};


void decodeMorseCode() {
  if (morseMap.find(morseCode) != morseMap.end()) {
    decodedMessage += morseMap[morseCode];
    Serial.println("Carattere decodificato: " + morseMap[morseCode]);
  } else {
    Serial.println("Codice Morse non riconosciuto: " + morseCode);
  }
  morseCode = "";
}


void processMorseCode(unsigned long pressDuration) {
  static int dotCount = 0;
  if (pressDuration > 200) {
    morseCode += "-";
    dotCount = 0; // Reset contatore punti
  } else {
    morseCode += ".";
    dotCount++;
    if (dotCount == 7) {
      if (decodedMessage.length() > 0) {
        decodedMessage.remove(decodedMessage.length() - 1);
      }
      dotCount = 0; // Reset contatore punti
      morseCode = ""; // Reset del codice Morse corrente
    }
  }
}

void handleButton() {
  bool readingButton = digitalRead(buttonPin);
  if (readingButton != lastButtonState) {
    lastDebounceTimeButton = millis();
  }
  if ((millis() - lastDebounceTimeButton) > debounceDelay) {
    if (readingButton != buttonState) {
      buttonState = readingButton;
      if (buttonState == LOW) {
        buttonPressTime = millis();
      } else {
        unsigned long pressDuration = millis() - buttonPressTime;
        // if (pressDuration > 5000) {
        //   digitalWrite(ledPin, LOW);
        //   delay(30);
        //   digitalWrite(ledPin, HIGH);
        //   setupWiFi();
        // } else if (pressDuration > 3000) {
        //   digitalWrite(ledPin, LOW);
        //   delay(30);
        //   digitalWrite(ledPin, HIGH);
        //   appendDecodedMessageToFile();
        // } else {
          processMorseCode(pressDuration);
        // }
        buttonPressTime = 0;
      }
    }
  }
  lastButtonState = readingButton;

  if (buttonPressTime == 0 && millis() - lastDebounceTimeButton > 700 && morseCode.length() > 0) {
    decodeMorseCode();
  }
}



#endif // MORSECODE_H
